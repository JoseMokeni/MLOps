import json
import logging
import os
import requests
import streamlit as st
import numpy as np

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# R√©cup√©ration de l'URL de l'API MLflow depuis les variables d'environnement
MLFLOW_API_URL = os.getenv('MLFLOW_API_URL', 'http://localhost:8000')
logging.info(f"MLFLOW_API_URL: {MLFLOW_API_URL}")

# Configuration de la page
st.set_page_config(
    page_title="Pr√©dicteur de Prix Immobilier",
    page_icon="üè†",
    layout="wide"
)

# Titre de l'application
st.title("üè† Pr√©dicteur de Prix Immobilier")

# Cr√©ation de colonnes pour organiser le layout
col1, col2 = st.columns(2)

with col1:
    st.subheader("Caract√©ristiques de la propri√©t√©")
    
    # Informations g√©n√©rales
    overall_qual = st.slider("Qualit√© g√©n√©rale (1-10)", 1, 10, 5)
    overall_cond = st.slider("Condition g√©n√©rale (1-10)", 1, 10, 7)
    year_built = st.number_input("Ann√©e de construction", 1800, 2024, 1961)
    
    # Surface et dimensions
    gr_liv_area = st.number_input("Surface habitable (pieds carr√©s)", 500, 10000, 1710)
    lot_area = st.number_input("Surface du terrain (pieds carr√©s)", 1000, 50000, 9600)
    lot_frontage = st.number_input("Fa√ßade du terrain (pieds)", 20, 200, 80)
    
    # Premier et deuxi√®me √©tage
    first_flr_sf = st.number_input("Surface 1er √©tage (pieds carr√©s)", 0, 5000, 856)
    second_flr_sf = st.number_input("Surface 2√®me √©tage (pieds carr√©s)", 0, 5000, 854)
    
    # Pi√®ces
    total_rooms = st.number_input("Nombre total de pi√®ces", 1, 20, 7)
    bedrooms = st.number_input("Nombre de chambres", 1, 10, 3)
    full_bath = st.number_input("Nombre de salles de bain compl√®tes", 0, 5, 1)
    half_bath = st.number_input("Nombre de demi-salles de bain", 0, 5, 0)

with col2:
    st.subheader("Caract√©ristiques suppl√©mentaires")
    
    # Garage
    garage_cars = st.number_input("Places de garage", 0, 5, 2)
    garage_area = st.number_input("Surface du garage (pieds carr√©s)", 0, 2000, 500)
    garage_yr_built = st.number_input("Ann√©e construction garage", 1800, 2024, 1961)
    
    # Sous-sol
    bsmt_fin_sf_1 = st.number_input("Surface finie sous-sol 1 (pieds carr√©s)", 0, 2000, 700)
    bsmt_fin_sf_2 = st.number_input("Surface finie sous-sol 2 (pieds carr√©s)", 0, 2000, 0)
    bsmt_unf_sf = st.number_input("Surface non finie sous-sol (pieds carr√©s)", 0, 2000, 150)
    total_bsmt_sf = st.number_input("Surface totale sous-sol (pieds carr√©s)", 0, 3000, 850)
    bsmt_full_bath = st.number_input("Salles de bain compl√®tes au sous-sol", 0, 3, 1)
    bsmt_half_bath = st.number_input("Demi-salles de bain au sous-sol", 0, 3, 0)
    
    # Autres caract√©ristiques
    fireplaces = st.number_input("Nombre de chemin√©es", 0, 5, 2)
    wood_deck_sf = st.number_input("Surface du patio en bois (pieds carr√©s)", 0, 1000, 210)
    open_porch_sf = st.number_input("Surface du porche ouvert (pieds carr√©s)", 0, 500, 0)

# Bouton pour lancer la pr√©diction
if st.button("Pr√©dire le prix"):
    # Pr√©paration des donn√©es pour l'API
    input_data = {
        "dataframe_records": [{
            "Order": 1,
            "PID": 5286,
            "MS SubClass": 20,
            "Lot Frontage": lot_frontage,
            "Lot Area": lot_area,
            "Overall Qual": overall_qual,
            "Overall Cond": overall_cond,
            "Year Built": year_built,
            "Year Remod/Add": year_built,
            "Mas Vnr Area": 0.0,
            "BsmtFin SF 1": bsmt_fin_sf_1,
            "BsmtFin SF 2": bsmt_fin_sf_2,
            "Bsmt Unf SF": bsmt_unf_sf,
            "Total Bsmt SF": total_bsmt_sf,
            "1st Flr SF": first_flr_sf,
            "2nd Flr SF": second_flr_sf,
            "Low Qual Fin SF": 0,
            "Gr Liv Area": np.log1p(gr_liv_area),  # Apply same transformation as training
            "Bsmt Full Bath": bsmt_full_bath,
            "Bsmt Half Bath": bsmt_half_bath,
            "Full Bath": full_bath,
            "Half Bath": half_bath,
            "Bedroom AbvGr": bedrooms,
            "Kitchen AbvGr": 1,
            "TotRms AbvGrd": total_rooms,
            "Fireplaces": fireplaces,
            "Garage Yr Blt": garage_yr_built,
            "Garage Cars": garage_cars,
            "Garage Area": garage_area,
            "Wood Deck SF": wood_deck_sf,
            "Open Porch SF": open_porch_sf,
            "Enclosed Porch": 0,
            "3Ssn Porch": 0,
            "Screen Porch": 0,
            "Pool Area": 0,
            "Misc Val": 0,
            "Mo Sold": 5,
            "Yr Sold": 2010
        }]
    }
    
    try:
        logging.info("Tentative de connexion √† l'API MLflow...")
        url = f"{MLFLOW_API_URL}/invocations"
        headers = {"Content-Type": "application/json"}
        
        logging.info(f"Donn√©es envoy√©es : {json.dumps(input_data, indent=2)}")
        response = requests.post(url, headers=headers, data=json.dumps(input_data))
        
        logging.info(f"Code de statut : {response.status_code}")
        
        if response.status_code == 200:
            prediction = response.json()
            logging.info(f"R√©ponse brute : {prediction}")
            
            # Apply inverse log transformation using expm1
            predicted_value = np.expm1(prediction['predictions'][0])
            predicted_price = "${:,.2f}".format(predicted_value)
            
            st.success(f"Prix estim√© : {predicted_price}")
        else:
            logging.error(f"Erreur lors de la pr√©diction. Code : {response.status_code}")
            logging.error(f"R√©ponse : {response.text}")
            st.error("Une erreur s'est produite lors de la pr√©diction. Consultez les logs pour plus de d√©tails.")
            
    except Exception as e:
        logging.error(f"Erreur de connexion √† l'API : {str(e)}")
        logging.exception("D√©tails de l'erreur :")
        st.error("Une erreur s'est produite. Consultez les logs pour plus de d√©tails.")

# Ajout d'informations suppl√©mentaires
st.markdown("---")
st.markdown("""
### √Ä propos de ce pr√©dicteur
Ce mod√®le utilise des techniques d'apprentissage automatique pour pr√©dire les prix immobiliers
en fonction des caract√©ristiques de la propri√©t√©. Les pr√©dictions sont bas√©es sur des donn√©es
historiques de ventes immobili√®res.

#### Notes importantes :
- Les pr√©dictions sont donn√©es √† titre indicatif
- Le mod√®le prend en compte de nombreuses caract√©ristiques de la propri√©t√©
- Les r√©sultats peuvent varier en fonction du march√© actuel
""")